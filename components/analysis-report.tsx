"use client"

import { useState } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Separator } from "@/components/ui/separator"
import { Button } from "@/components/ui/button"
import {
  AlertTriangle,
  CheckCircle,
  ExternalLink,
  TrendingUp,
  Download,
  Share2,
  Copy,
  Mail,
  FileText,
  Printer,
  Check,
} from "lucide-react"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"

interface AnalysisData {
  title: string
  url: string
  author?: string
  publishDate?: string
  content: string
  aiAnalysis: {
    coreClaims: string[]
    languageAnalysis: {
      tone: string
      objectivity: string
      emotionalLanguage: string[]
      hedgingLanguage: string[]
    }
    redFlags: string[]
    verificationQuestions: string[]
    overallAssessment: {
      credibilityScore: number
      biasIndicators: string[]
      strengthsWeaknesses: {
        strengths: string[]
        weaknesses: string[]
      }
    }
  }
}

interface AnalysisReportProps {
  analysis: AnalysisData
  onExport?: () => void
  onShare?: () => void
}

export function AnalysisReport({ analysis, onExport, onShare }: AnalysisReportProps) {
  const [copySuccess, setCopySuccess] = useState(false)
  const [exportLoading, setExportLoading] = useState(false)

  if (!analysis || !analysis.aiAnalysis || !analysis.aiAnalysis.overallAssessment) {
    return (
      <Card className="border-destructive">
        <CardContent className="pt-6">
          <div className="flex items-center gap-2 text-destructive">
            <AlertTriangle className="h-5 w-5" />
            <span className="font-medium">Analysis Data Error</span>
          </div>
          <p className="text-sm text-muted-foreground mt-2">
            The analysis data is incomplete or corrupted. Please try analyzing the article again.
          </p>
        </CardContent>
      </Card>
    )
  }

  const generateMarkdownReport = () => {
    const { title, url, author, publishDate, aiAnalysis } = analysis
    const publishDateFormatted = publishDate ? new Date(publishDate).toLocaleDateString() : "Unknown"
    const hostname = new URL(url).hostname

    return `# Digital Skeptic Analysis Report

## Article Information
- **Title**: ${title}
- **Author**: ${author || "Unknown"}
- **Published**: ${publishDateFormatted}
- **Source**: [${hostname}](${url})
- **Analysis Date**: ${new Date().toLocaleDateString()}

## Executive Summary
**Credibility Score**: ${aiAnalysis.overallAssessment.credibilityScore}/100
**Overall Assessment**: ${aiAnalysis.overallAssessment.credibilityScore >= 70 ? "High credibility" : aiAnalysis.overallAssessment.credibilityScore >= 40 ? "Moderate credibility" : "Low credibility"}

## Core Claims
${aiAnalysis.coreClaims.map((claim, index) => `${index + 1}. ${claim}`).join("\n")}

## Language & Tone Analysis
- **Overall Tone**: ${aiAnalysis.languageAnalysis.tone}
- **Objectivity Level**: ${aiAnalysis.languageAnalysis.objectivity}
${aiAnalysis.languageAnalysis.emotionalLanguage.length > 0 ? `- **Emotional Language Detected**: ${aiAnalysis.languageAnalysis.emotionalLanguage.join(", ")}` : ""}
${aiAnalysis.languageAnalysis.hedgingLanguage.length > 0 ? `- **Hedging Language**: ${aiAnalysis.languageAnalysis.hedgingLanguage.join(", ")}` : ""}

## Potential Red Flags
${aiAnalysis.redFlags.map((flag, index) => `${index + 1}. ${flag}`).join("\n")}

## Verification Questions
${aiAnalysis.verificationQuestions.map((question, index) => `${index + 1}. ${question}`).join("\n")}

## Strengths & Weaknesses

### Strengths
${
  aiAnalysis.overallAssessment.strengthsWeaknesses.strengths.length > 0
    ? aiAnalysis.overallAssessment.strengthsWeaknesses.strengths
        .map((strength, index) => `${index + 1}. ${strength}`)
        .join("\n")
    : "No notable strengths identified"
}

### Weaknesses
${
  aiAnalysis.overallAssessment.strengthsWeaknesses.weaknesses.length > 0
    ? aiAnalysis.overallAssessment.strengthsWeaknesses.weaknesses
        .map((weakness, index) => `${index + 1}. ${weakness}`)
        .join("\n")
    : "No notable weaknesses identified"
}

---
*Report generated by Digital Skeptic AI Analysis Tool*
*This analysis is for educational and critical thinking purposes only*`
  }

  const handleExportMarkdown = () => {
    setExportLoading(true)
    const markdown = generateMarkdownReport()
    const blob = new Blob([markdown], { type: "text/markdown" })
    const url = URL.createObjectURL(blob)
    const a = document.createElement("a")
    a.href = url
    a.download = `digital-skeptic-analysis-${new Date().toISOString().split("T")[0]}.md`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
    setExportLoading(false)
    onExport?.()
  }

  const handleExportJSON = () => {
    setExportLoading(true)
    const jsonData = {
      metadata: {
        title: analysis.title,
        url: analysis.url,
        author: analysis.author,
        publishDate: analysis.publishDate,
        analysisDate: new Date().toISOString(),
        tool: "Digital Skeptic AI Analysis Tool",
      },
      analysis: analysis.aiAnalysis,
    }
    const blob = new Blob([JSON.stringify(jsonData, null, 2)], { type: "application/json" })
    const url = URL.createObjectURL(blob)
    const a = document.createElement("a")
    a.href = url
    a.download = `digital-skeptic-analysis-${new Date().toISOString().split("T")[0]}.json`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
    setExportLoading(false)
    onExport?.()
  }

  const handleExportText = () => {
    setExportLoading(true)
    const markdown = generateMarkdownReport()
    const plainText = markdown
      .replace(/#{1,6}\s/g, "")
      .replace(/\*\*(.*?)\*\*/g, "$1")
      .replace(/\*(.*?)\*/g, "$1")
      .replace(/\[(.*?)\]$$.*?$$/g, "$1")
      .replace(/---/g, "---")

    const blob = new Blob([plainText], { type: "text/plain" })
    const url = URL.createObjectURL(blob)
    const a = document.createElement("a")
    a.href = url
    a.download = `digital-skeptic-analysis-${new Date().toISOString().split("T")[0]}.txt`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
    setExportLoading(false)
    onExport?.()
  }

  const handlePrint = () => {
    window.print()
  }

  const handleCopyToClipboard = async () => {
    const markdown = generateMarkdownReport()
    try {
      await navigator.clipboard.writeText(markdown)
      setCopySuccess(true)
      setTimeout(() => setCopySuccess(false), 2000)
    } catch (err) {
      console.error("Failed to copy to clipboard:", err)
    }
  }

  const handleEmailShare = () => {
    const subject = encodeURIComponent(`Analysis: ${analysis.title}`)
    const body = encodeURIComponent(
      `I've analyzed this article using Digital Skeptic AI:\n\n${analysis.url}\n\nKey findings:\n- Credibility Score: ${analysis.aiAnalysis.overallAssessment.credibilityScore}/100\n- ${analysis.aiAnalysis.redFlags.length} potential red flags identified\n- ${analysis.aiAnalysis.verificationQuestions.length} verification questions generated\n\nView the full analysis report for detailed insights.`,
    )
    window.open(`mailto:?subject=${subject}&body=${body}`)
    onShare?.()
  }

  const handleSocialShare = async () => {
    const shareText = `I analyzed "${analysis.title}" using Digital Skeptic AI. Credibility score: ${analysis.aiAnalysis.overallAssessment.credibilityScore}/100. Check out this critical thinking tool!`

    if (navigator.share) {
      try {
        await navigator.share({
          title: `Analysis: ${analysis.title}`,
          text: shareText,
          url: window.location.href,
        })
      } catch (err) {
        await handleCopyToClipboard()
      }
    } else {
      await handleCopyToClipboard()
    }
    onShare?.()
  }

  return (
    <div className="space-y-6 print:space-y-4">
      <div className="flex items-center justify-between print:hidden">
        <div className="flex items-center gap-2">
          <CheckCircle className="h-5 w-5 text-primary" />
          <h2 className="text-xl font-semibold">Critical Analysis Report</h2>
        </div>
        <div className="flex gap-2">
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="outline" size="sm" disabled={exportLoading}>
                <Download className="h-4 w-4 mr-2" />
                {exportLoading ? "Exporting..." : "Export"}
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              <DropdownMenuItem onClick={handleExportMarkdown}>
                <FileText className="h-4 w-4 mr-2" />
                Markdown (.md)
              </DropdownMenuItem>
              <DropdownMenuItem onClick={handleExportJSON}>
                <FileText className="h-4 w-4 mr-2" />
                JSON Data (.json)
              </DropdownMenuItem>
              <DropdownMenuItem onClick={handleExportText}>
                <FileText className="h-4 w-4 mr-2" />
                Plain Text (.txt)
              </DropdownMenuItem>
              <DropdownMenuSeparator />
              <DropdownMenuItem onClick={handlePrint}>
                <Printer className="h-4 w-4 mr-2" />
                Print Report
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>

          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="outline" size="sm">
                <Share2 className="h-4 w-4 mr-2" />
                Share
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              <DropdownMenuItem onClick={handleCopyToClipboard}>
                {copySuccess ? <Check className="h-4 w-4 mr-2 text-green-600" /> : <Copy className="h-4 w-4 mr-2" />}
                {copySuccess ? "Copied!" : "Copy Report"}
              </DropdownMenuItem>
              <DropdownMenuItem onClick={handleEmailShare}>
                <Mail className="h-4 w-4 mr-2" />
                Email Summary
              </DropdownMenuItem>
              <DropdownMenuItem onClick={handleSocialShare}>
                <Share2 className="h-4 w-4 mr-2" />
                Share Summary
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      </div>

      <div className="hidden print:block">
        <h1 className="text-2xl font-bold mb-2">Digital Skeptic Analysis Report</h1>
        <p className="text-sm text-gray-600 mb-4">Generated on {new Date().toLocaleDateString()}</p>
      </div>

      <Card className="print:shadow-none print:border-gray-300">
        <CardHeader className="print:pb-2">
          <CardTitle className="text-lg">Article Information</CardTitle>
        </CardHeader>
        <CardContent className="space-y-2">
          <div>
            <span className="font-medium">Title: </span>
            <span className="text-sm">{analysis.title}</span>
          </div>
          {analysis.author && (
            <div>
              <span className="font-medium">Author: </span>
              <span className="text-sm">{analysis.author}</span>
            </div>
          )}
          {analysis.publishDate && (
            <div>
              <span className="font-medium">Published: </span>
              <span className="text-sm">{new Date(analysis.publishDate).toLocaleDateString()}</span>
            </div>
          )}
          <div>
            <span className="font-medium">Source: </span>
            <a
              href={analysis.url}
              target="_blank"
              rel="noopener noreferrer"
              className="text-sm text-primary hover:underline inline-flex items-center gap-1 print:text-black"
            >
              {new URL(analysis.url).hostname}
              <ExternalLink className="h-3 w-3 print:hidden" />
            </a>
          </div>
          <div>
            <span className="font-medium">Analysis Date: </span>
            <span className="text-sm">{new Date().toLocaleDateString()}</span>
          </div>
        </CardContent>
      </Card>

      <Card className="print:shadow-none print:border-gray-300">
        <CardHeader className="print:pb-2">
          <CardTitle className="text-lg flex items-center gap-2">
            <TrendingUp className="h-5 w-5 print:hidden" />
            Credibility Assessment
          </CardTitle>
          <CardDescription className="print:text-gray-600">
            Overall credibility score based on multiple factors
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="flex items-center gap-4">
            <div className="text-3xl font-bold text-primary print:text-black">
              {analysis.aiAnalysis.overallAssessment.credibilityScore}/100
            </div>
            <div className="flex-1">
              <div className="w-full bg-muted rounded-full h-3 print:bg-gray-200">
                <div
                  className="bg-primary h-3 rounded-full transition-all duration-500 print:bg-gray-800"
                  style={{ width: `${analysis.aiAnalysis.overallAssessment.credibilityScore}%` }}
                />
              </div>
              <p className="text-sm text-muted-foreground mt-2 print:text-gray-600">
                {analysis.aiAnalysis.overallAssessment.credibilityScore >= 70
                  ? "High credibility - Well-sourced and objective reporting"
                  : analysis.aiAnalysis.overallAssessment.credibilityScore >= 40
                    ? "Moderate credibility - Some concerns but generally reliable"
                    : "Low credibility - Significant issues with sourcing or bias"}
              </p>
            </div>
          </div>
          {analysis.aiAnalysis.overallAssessment.biasIndicators.length > 0 && (
            <div className="mt-4">
              <span className="font-medium text-sm">Bias Indicators: </span>
              <div className="flex flex-wrap gap-1 mt-1">
                {analysis.aiAnalysis.overallAssessment.biasIndicators.map((indicator, index) => (
                  <Badge
                    key={index}
                    variant="destructive"
                    className="text-xs print:bg-gray-200 print:text-black print:border print:border-gray-400"
                  >
                    {indicator}
                  </Badge>
                ))}
              </div>
            </div>
          )}
        </CardContent>
      </Card>

      <Card className="print:shadow-none print:border-gray-300">
        <CardHeader className="print:pb-2">
          <CardTitle className="text-lg">Core Claims</CardTitle>
          <CardDescription className="print:text-gray-600">Main factual assertions made in the article</CardDescription>
        </CardHeader>
        <CardContent>
          {analysis.aiAnalysis.coreClaims.length > 0 ? (
            <ol className="space-y-2">
              {analysis.aiAnalysis.coreClaims.map((claim, index) => (
                <li key={index} className="flex items-start gap-3">
                  <div className="w-6 h-6 bg-primary text-primary-foreground rounded-full flex items-center justify-center text-xs font-medium flex-shrink-0 mt-0.5 print:bg-gray-800 print:text-white">
                    {index + 1}
                  </div>
                  <span className="text-sm leading-relaxed">{claim}</span>
                </li>
              ))}
            </ol>
          ) : (
            <p className="text-sm text-muted-foreground print:text-gray-600">No core claims identified</p>
          )}
        </CardContent>
      </Card>

      <Card className="print:shadow-none print:border-gray-300">
        <CardHeader className="print:pb-2">
          <CardTitle className="text-lg">Language & Tone Analysis</CardTitle>
          <CardDescription className="print:text-gray-600">
            Assessment of the article's writing style and approach
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-2 gap-4">
            <div>
              <span className="font-medium text-sm">Overall Tone</span>
              <div className="mt-1">
                <Badge
                  variant="secondary"
                  className="capitalize print:bg-gray-200 print:text-black print:border print:border-gray-400"
                >
                  {analysis.aiAnalysis.languageAnalysis.tone}
                </Badge>
              </div>
            </div>
            <div>
              <span className="font-medium text-sm">Objectivity Level</span>
              <div className="mt-1">
                <Badge variant="outline" className="capitalize print:border-gray-400">
                  {analysis.aiAnalysis.languageAnalysis.objectivity}
                </Badge>
              </div>
            </div>
          </div>

          {analysis.aiAnalysis.languageAnalysis.emotionalLanguage.length > 0 && (
            <div>
              <span className="font-medium text-sm">Emotional Language Detected</span>
              <div className="flex flex-wrap gap-1 mt-2">
                {analysis.aiAnalysis.languageAnalysis.emotionalLanguage.map((word, index) => (
                  <Badge
                    key={index}
                    variant="destructive"
                    className="text-xs print:bg-gray-200 print:text-black print:border print:border-gray-400"
                  >
                    {word}
                  </Badge>
                ))}
              </div>
            </div>
          )}

          {analysis.aiAnalysis.languageAnalysis.hedgingLanguage.length > 0 && (
            <div>
              <span className="font-medium text-sm">Hedging Language</span>
              <div className="flex flex-wrap gap-1 mt-2">
                {analysis.aiAnalysis.languageAnalysis.hedgingLanguage.map((phrase, index) => (
                  <Badge
                    key={index}
                    variant="secondary"
                    className="text-xs print:bg-gray-200 print:text-black print:border print:border-gray-400"
                  >
                    {phrase}
                  </Badge>
                ))}
              </div>
            </div>
          )}
        </CardContent>
      </Card>

      <Card className="print:shadow-none print:border-gray-300">
        <CardHeader className="print:pb-2">
          <CardTitle className="text-lg flex items-center gap-2">
            <AlertTriangle className="h-5 w-5 text-destructive print:hidden" />
            Potential Red Flags
          </CardTitle>
          <CardDescription className="print:text-gray-600">
            Signs of bias or poor reporting practices detected
          </CardDescription>
        </CardHeader>
        <CardContent>
          {analysis.aiAnalysis.redFlags.length > 0 ? (
            <ul className="space-y-3">
              {analysis.aiAnalysis.redFlags.map((flag, index) => (
                <li key={index} className="flex items-start gap-3">
                  <AlertTriangle className="h-4 w-4 text-destructive mt-1 flex-shrink-0 print:hidden" />
                  <span className="text-sm leading-relaxed print:before:content-['•_']">{flag}</span>
                </li>
              ))}
            </ul>
          ) : (
            <p className="text-sm text-muted-foreground print:text-gray-600">No significant red flags detected</p>
          )}
        </CardContent>
      </Card>

      <Card className="print:shadow-none print:border-gray-300">
        <CardHeader className="print:pb-2">
          <CardTitle className="text-lg">Verification Questions</CardTitle>
          <CardDescription className="print:text-gray-600">
            Key questions to ask when fact-checking this article
          </CardDescription>
        </CardHeader>
        <CardContent>
          {analysis.aiAnalysis.verificationQuestions.length > 0 ? (
            <ol className="space-y-3">
              {analysis.aiAnalysis.verificationQuestions.map((question, index) => (
                <li key={index} className="flex items-start gap-3">
                  <div className="w-6 h-6 bg-primary text-primary-foreground rounded-full flex items-center justify-center text-xs font-medium flex-shrink-0 print:bg-gray-800 print:text-white">
                    {index + 1}
                  </div>
                  <span className="text-sm leading-relaxed">{question}</span>
                </li>
              ))}
            </ol>
          ) : (
            <p className="text-sm text-muted-foreground print:text-gray-600">No verification questions generated</p>
          )}
        </CardContent>
      </Card>

      <div className="grid md:grid-cols-2 gap-4 print:grid-cols-1 print:gap-2">
        <Card className="print:shadow-none print:border-gray-300">
          <CardHeader className="print:pb-2">
            <CardTitle className="text-lg text-green-600 print:text-black">Strengths</CardTitle>
            <CardDescription className="print:text-gray-600">Positive aspects of the reporting</CardDescription>
          </CardHeader>
          <CardContent>
            {analysis.aiAnalysis.overallAssessment.strengthsWeaknesses.strengths.length > 0 ? (
              <ul className="space-y-2">
                {analysis.aiAnalysis.overallAssessment.strengthsWeaknesses.strengths.map((strength, index) => (
                  <li key={index} className="flex items-start gap-2">
                    <CheckCircle className="h-4 w-4 text-green-600 mt-0.5 flex-shrink-0 print:hidden" />
                    <span className="text-sm print:before:content-['✓_']">{strength}</span>
                  </li>
                ))}
              </ul>
            ) : (
              <p className="text-sm text-muted-foreground print:text-gray-600">No notable strengths identified</p>
            )}
          </CardContent>
        </Card>

        <Card className="print:shadow-none print:border-gray-300">
          <CardHeader className="print:pb-2">
            <CardTitle className="text-lg text-orange-600 print:text-black">Weaknesses</CardTitle>
            <CardDescription className="print:text-gray-600">Areas for improvement in the reporting</CardDescription>
          </CardHeader>
          <CardContent>
            {analysis.aiAnalysis.overallAssessment.strengthsWeaknesses.weaknesses.length > 0 ? (
              <ul className="space-y-2">
                {analysis.aiAnalysis.overallAssessment.strengthsWeaknesses.weaknesses.map((weakness, index) => (
                  <li key={index} className="flex items-start gap-2">
                    <AlertTriangle className="h-4 w-4 text-orange-600 mt-0.5 flex-shrink-0 print:hidden" />
                    <span className="text-sm print:before:content-['⚠_']">{weakness}</span>
                  </li>
                ))}
              </ul>
            ) : (
              <p className="text-sm text-muted-foreground print:text-gray-600">No notable weaknesses identified</p>
            )}
          </CardContent>
        </Card>
      </div>

      <Separator className="print:border-gray-400" />

      <div className="text-center text-xs text-muted-foreground space-y-1 print:text-gray-600">
        <p>Report generated by Digital Skeptic AI Analysis Tool</p>
        <p>This analysis is for educational and critical thinking purposes only</p>
      </div>
    </div>
  )
}
